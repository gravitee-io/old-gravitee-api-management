{
  "data": [
    {
      "id": "api-key",
      "name": "Api Key",
      "description": "Description of the ApiKey Gravitee Policy",
      "version": "2.0.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": false,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:apikey:configuration:ApiKeyPolicyConfiguration",
        "properties": {
          "description": {
            "type": "string",
            "default": false,
            "title": "Description",
            "description": ""
          },
          "propagateApiKey": {
            "title": "Propagate API Key to upstream API",
            "type": "boolean"
          }
        }
      }
    },
    {
      "id": "policy-assign-attributes",
      "name": "Assign attributes",
      "description": "Description of the Assign attributes Policy",
      "version": "1.2.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-assign-content",
      "name": "Assign content",
      "description": "Description of the Assign content Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "cache",
      "name": "Cache",
      "description": "Description of the Cache Gravitee Policy",
      "version": "1.6.0",
      "icon": "",
      "category": "performance",
      "onRequest": true,
      "onResponse": false,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:cache:configuration:CachePolicyConfiguration",
        "properties": {
          "cacheName": {
            "title": "Cache name",
            "description": "The cache resource used to store the element.",
            "type": "string",
            "x-schema-form": {
              "event": {
                "name": "fetch-resources",
                "types": ["cache"]
              }
            }
          },
          "key": {
            "title": "Key",
            "description": "The key used to store the element (support EL).",
            "type": "string"
          },
          "timeToLiveSeconds": {
            "title": "Time to live (in seconds)",
            "default": 600,
            "description": "Time to live of the element put in cache (Default to 10 minutes).",
            "type": "integer"
          },
          "useResponseCacheHeaders": {
            "title": "Use response headers",
            "description": "Time to live based on 'Cache-Control' and / or 'Expires' headers from response.",
            "type": "boolean"
          },
          "scope": {
            "title": "Scope",
            "description": "Cached response can be set for a single consumer (application) or for all consumers.<br><strong>WARNING:</strong> Please be aware that by using an \"API\" scope, data will be shared between all consumers!",
            "type": "string",
            "default": "APPLICATION",
            "enum": ["API", "APPLICATION"]
          }
        },
        "required": ["cacheName", "timeToLiveSeconds"]
      }
    },
    {
      "id": "dynamic-routing",
      "name": "Dynamic Routing",
      "description": "Description of the Dynamic Routing Gravitee Policy",
      "version": "1.9.1",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-generate-jwt",
      "name": "Generate JWT",
      "description": "Description of the Generate JWT Gravitee Policy",
      "version": "1.3.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true,
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "groovy",
      "name": "Groovy",
      "description": "Description of the Groovy Gravitee Policy",
      "version": "1.10.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:groovy:configuration:GroovyPolicyConfiguration",
        "properties": {
          "onContentScript": {
            "title": "Content script",
            "description": "Groovy script to evaluate during the 'content' phase. <br> Useful to transform request/response content",
            "type": "string",
            "x-schema-form": {
              "type": "codemirror",
              "codemirrorOptions": {
                "placeholder": "Put your groovy script here",
                "lineWrapping": true,
                "lineNumbers": true,
                "allowDropFileTypes": true,
                "autoCloseTags": true,
                "mode": "groovy"
              }
            }
          }
        }
      }
    },
    {
      "id": "html-json",
      "name": "HTML to JSON",
      "description": "The HTML to JSON Transformation Gravitee Policy allows to get a json by parsing an html content",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-http-callout",
      "name": "HTTP Callout",
      "description": "Description of the CalloutHttp Gravitee Policy",
      "version": "1.9.0",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:callout:configuration:CalloutHttpPolicyConfiguration",
        "properties": {
          "method": {
            "title": "HTTP Method",
            "description": "HTTP method to invoke the endpoint.",
            "type": "string",
            "default": "GET",
            "enum": ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "CONNECT", "OPTIONS", "TRACE"]
          },
          "url": {
            "title": "URL",
            "type": "string"
          },
          "headers": {
            "type": "array",
            "title": "Request Headers",
            "items": {
              "type": "object",
              "id": "urn:jsonschema:io:gravitee:policy:callout:configuration:HttpHeader",
              "title": "Header",
              "properties": {
                "name": {
                  "title": "Name",
                  "type": "string"
                },
                "value": {
                  "title": "Value",
                  "type": "string"
                }
              }
            },
            "required": ["name", "value"]
          },
          "body": {
            "title": "Request body",
            "type": "string",
            "x-schema-form": {
              "type": "codemirror",
              "codemirrorOptions": {
                "placeholder": "Put request body here",
                "lineWrapping": true,
                "lineNumbers": true,
                "allowDropFileTypes": true,
                "autoCloseTags": true
              }
            }
          },
          "variables": {
            "type": "array",
            "title": "Context variables",
            "items": {
              "type": "object",
              "id": "urn:jsonschema:io:gravitee:policy:callout:configuration:Variable",
              "title": "Variable",
              "properties": {
                "name": {
                  "title": "Name",
                  "type": "string"
                },
                "value": {
                  "title": "Value",
                  "type": "string",
                  "default": "{#jsonPath(#calloutResponse.content, '$.field')}"
                }
              }
            },
            "required": ["name", "value"]
          },
          "exitOnError": {
            "title": "Exit on error",
            "description": "Terminate the request if the error condition is true",
            "type": "boolean",
            "default": false
          },
          "errorCondition": {
            "title": "Error condition",
            "description": "The condition which will be verified to end the request (support EL).",
            "default": "{#calloutResponse.status >= 400 and #calloutResponse.status <= 599}",
            "type": "string",
            "x-schema-form": {
              "expression-language": true
            }
          },
          "errorStatusCode": {
            "title": "Error status code",
            "description": "HTTP Status Code send to the consumer if the condition is true",
            "type": "string",
            "default": "500",
            "enum": [
              "100",
              "101",
              "102",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "307",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "422",
              "423",
              "424",
              "429",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "507"
            ],
            "x-schema-form": {
              "type": "select",
              "titleMap": {
                "100": "100 - CONTINUE",
                "101": "101 - SWITCHING_PROTOCOLS",
                "102": "102 - PROCESSING",
                "200": "200 - OK",
                "201": "201 - CREATED",
                "202": "202 - ACCEPTED",
                "203": "203 - NON_AUTHORITATIVE_INFORMATION",
                "204": "204 - NO_CONTENT",
                "205": "205 - RESET_CONTENT",
                "206": "206 - PARTIAL_CONTENT",
                "207": "207 - MULTI_STATUS",
                "300": "300 - MULTIPLE_CHOICES",
                "301": "301 - MOVED_PERMANENTLY",
                "302": "302 - FOUND OR MOVED_TEMPORARILY",
                "303": "303 - SEE_OTHER",
                "304": "304 - NOT_MODIFIED",
                "305": "305 - USE_PROXY",
                "307": "307 - TEMPORARY_REDIRECT",
                "400": "400 - BAD_REQUEST",
                "401": "401 - UNAUTHORIZED",
                "402": "402 - PAYMENT_REQUIRED",
                "403": "403 - FORBIDDEN",
                "404": "404 - NOT_FOUND",
                "405": "405 - METHOD_NOT_ALLOWED",
                "406": "406 - NOT_ACCEPTABLE",
                "407": "407 - PROXY_AUTHENTICATION_REQUIRED",
                "408": "408 - REQUEST_TIMEOUT",
                "409": "409 - CONFLICT",
                "410": "410 - GONE",
                "411": "411 - LENGTH_REQUIRED",
                "412": "412 - PRECONDITION_FAILED",
                "413": "413 - REQUEST_ENTITY_TOO_LARGE",
                "414": "414 - REQUEST_URI_TOO_LONG",
                "415": "415 - UNSUPPORTED_MEDIA_TYPE",
                "416": "416 - REQUESTED_RANGE_NOT_SATISFIABLE",
                "417": "417 - EXPECTATION_FAILED",
                "422": "422 - UNPROCESSABLE_ENTITY",
                "423": "423 - LOCKED",
                "424": "424 - FAILED_DEPENDENCY",
                "429": "429 - TOO_MANY_REQUESTS",
                "500": "500 - INTERNAL_SERVER_ERROR",
                "501": "501 - NOT_IMPLEMENTED",
                "502": "502 - BAD_GATEWAY",
                "503": "503 - SERVICE_UNAVAILABLE",
                "504": "504 - GATEWAY_TIMEOUT",
                "505": "505 - HTTP_VERSION_NOT_SUPPORTED",
                "507": "507 - INSUFFICIENT_STORAGE"
              }
            }
          },
          "errorContent": {
            "title": "Error response body",
            "description": "The body response of the error if the condition is true (support EL)",
            "type": "string",
            "x-schema-form": {
              "type": "codemirror",
              "codemirrorOptions": {
                "placeholder": "Put response body here",
                "lineWrapping": true,
                "lineNumbers": true,
                "allowDropFileTypes": true,
                "autoCloseTags": true,
                "mode": "javascript"
              }
            }
          }
        },
        "required": ["url", "method", "variables", "exitOnError"]
      }
    },
    {
      "id": "ip-filtering",
      "name": "IPFiltering",
      "description": "Filter IPs from remote address or X-Forwarded-For header with blacklist or whitelist",
      "version": "1.3.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:IPFilteringPolicyConfiguration",
        "properties": {
          "matchAllFromXForwardedFor": {
            "title": "Use X-Forwarded-For header",
            "type": "boolean"
          },
          "whitelistIps": {
            "title": "IPs Whitelist (CIDR allowed)",
            "type": "array",
            "items": {
              "title": "IP or CIDR",
              "type": "string"
            }
          },
          "blacklistIps": {
            "title": "IPs Blacklist (CIDR allowed)",
            "type": "array",
            "items": {
              "title": "IP or CIDR",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "id": "json-validation",
      "name": "JSON Validation",
      "description": "Description of the Json Validation Gravitee Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "jws",
      "name": "JSON Web Signature",
      "description": "Description of the JWS Gravitee Policy",
      "version": "1.1.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": false
    },
    {
      "id": "jwt",
      "name": "JSON Web Tokens",
      "description": "Description of the JWT Gravitee Policy",
      "version": "1.14.2",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": false
    },
    {
      "id": "json-to-json",
      "name": "JSON to JSON Transformation",
      "description": "Description of the JSON to JSON Transformation Gravitee Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "json-to-xml",
      "name": "JSON to XML Transformation",
      "description": "Description of the JSON to XML Transformation Gravitee Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "key-less",
      "name": "Keyless",
      "description": "Description of the Keyless Security Gravitee Policy",
      "version": "1.2.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": false
    },
    {
      "id": "latency",
      "name": "Latency",
      "description": "Description of the Latency Gravitee Policy",
      "version": "1.1.0",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": false
    },
    {
      "id": "mock",
      "name": "Mock",
      "description": "Description of the Mock Gravitee Policy",
      "version": "1.9.0",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "oauth2",
      "name": "OAuth2",
      "description": "Description of the OAuth2 Gravitee Policy",
      "version": "1.12.1",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-openid-userinfo",
      "name": "OpenID Connect - UserInfo",
      "description": "Description of the OpenID Connect - UserInfo  Gravitee Policy",
      "version": "1.2.0",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-override-request-method",
      "name": "Override HTTP Method",
      "description": "Description of the override HTTP request method Gravitee Policy",
      "version": "1.1.0",
      "icon": "",
      "category": "transformation"
    },
    {
      "id": "quota",
      "name": "Quota",
      "description": "Description of the Quota Gravitee Policy",
      "version": "1.8.1",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "rate-limit",
      "name": "Rate Limit",
      "description": "Description of the Rate Limit Gravitee Policy",
      "version": "1.8.1",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": false,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:ratelimit:configuration:RateLimitPolicyConfiguration",
        "properties": {
          "description": {
            "type": "string",
            "default": false,
            "title": "Description",
            "description": ""
          },
          "async": {
            "type": "boolean",
            "default": false,
            "title": "Non-strict mode (async)",
            "description": "By activating this option, rate-limiting is applied in an asynchronous way meaning that the distributed counter value is not strict."
          },
          "addHeaders": {
            "type": "boolean",
            "default": false,
            "title": "Add response headers",
            "description": "Add X-Rate-Limit-Limit, X-Rate-Limit-Remaining and X-Rate-Limit-Reset headers in HTTP response"
          },
          "rate": {
            "type": "object",
            "title": "Apply rate-limiting",
            "id": "urn:jsonschema:io:gravitee:policy:ratelimit:configuration:RateLimitConfiguration",
            "properties": {
              "limit": {
                "type": "integer",
                "title": "Max requests",
                "description": "Limit on the number of requests that can be sent."
              },
              "periodTime": {
                "type": "integer",
                "title": "Time duration",
                "default": 1
              },
              "periodTimeUnit": {
                "type": "string",
                "title": "Time unit",
                "default": "SECONDS",
                "enum": ["SECONDS", "MINUTES"]
              }
            },
            "required": ["limit", "periodTime", "periodTimeUnit"]
          }
        },
        "required": ["rate"]
      }
    },
    {
      "id": "request-content-limit",
      "name": "Request Content Limit",
      "description": "Description of the Request Content Limit Gravitee Policy",
      "version": "1.5.0",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "resource-filtering",
      "name": "Resource Filtering",
      "description": "Description of the Resource Filtering Gravitee Policy",
      "version": "1.5.1",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "rest-to-soap",
      "name": "Rest to SOAP Transformer",
      "description": "Description of the Rest to SOAP Transformer Policy",
      "version": "1.6.0",
      "icon": "",
      "category": "transformation",
      "onRequest": false,
      "onResponse": true
    },
    {
      "id": "rbac",
      "name": "Role Based Access Control",
      "description": "Description of the RBAC Gravitee Policy",
      "version": "1.0.2",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "ssl-enforcement",
      "name": "SSL Enforcement",
      "description": "Description of the SSL Enforcement Gravitee Policy",
      "version": "1.0.1",
      "icon": "",
      "category": "security",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "transform-headers",
      "name": "Transform Headers",
      "description": "Description of the Transform Headers Gravitee Policy",
      "version": "1.6.1",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:transformheaders:configuration:TransformHeadersPolicyConfiguration",
        "properties": {
          "description": {
            "type": "string",
            "default": false,
            "title": "Description",
            "description": ""
          },
          "removeHeaders": {
            "type": "array",
            "title": "Remove headers",
            "items": {
              "type": "string",
              "description": "Name of the header",
              "title": "Header"
            }
          },
          "whitelistHeaders": {
            "type": "array",
            "title": "Headers to keep",
            "description": "Works like a whitelist. All other headers will be removed.",
            "items": {
              "type": "string",
              "description": "Name of the header",
              "title": "Header"
            }
          },
          "addHeaders": {
            "type": "array",
            "title": "Add / update headers",
            "items": {
              "type": "object",
              "id": "urn:jsonschema:io:gravitee:policy:transformheaders:configuration:HttpHeader",
              "title": "Header",
              "properties": {
                "name": {
                  "title": "Name",
                  "description": "Name of the header",
                  "type": "string",
                  "pattern": "^\\S*$",
                  "validationMessage": {
                    "202": "Header name must not contain spaces."
                  }
                },
                "value": {
                  "title": "Value",
                  "description": "Value of the header",
                  "type": "string"
                }
              },
              "required": ["name", "value"]
            }
          }
        }
      }
    },
    {
      "id": "transform-queryparams",
      "name": "Transform Query Parameters",
      "description": "Description of the Transform Query Parameters Policy",
      "version": "1.4.1",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "url-rewriting",
      "name": "URL Rewriting",
      "description": "Description of the URL Rewriting Gravitee Policy",
      "version": "1.2.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "policy-request-validation",
      "name": "Validate Request",
      "description": "Description of the validate HTTP request Policy",
      "version": "1.7.1",
      "icon": "",
      "category": "others",
      "onRequest": true,
      "onResponse": false,
      "schema": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:requestvalidation:configuration:RequestValidationPolicyConfiguration",
        "properties": {
          "status": {
            "title": "Status Code",
            "description": "HTTP Status Code send to the consumer in case of validation issues",
            "type": "string",
            "default": "400",
            "enum": [
              "100",
              "101",
              "102",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "307",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "422",
              "423",
              "424",
              "429",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "507"
            ],
            "x-schema-form": {
              "type": "select",
              "titleMap": {
                "100": "100 - CONTINUE",
                "101": "101 - SWITCHING_PROTOCOLS",
                "102": "102 - PROCESSING",
                "200": "200 - OK",
                "201": "201 - CREATED",
                "202": "202 - ACCEPTED",
                "203": "203 - NON_AUTHORITATIVE_INFORMATION",
                "204": "204 - NO_CONTENT",
                "205": "205 - RESET_CONTENT",
                "206": "206 - PARTIAL_CONTENT",
                "207": "207 - MULTI_STATUS",
                "300": "300 - MULTIPLE_CHOICES",
                "301": "301 - MOVED_PERMANENTLY",
                "302": "302 - FOUND OR MOVED_TEMPORARILY",
                "303": "303 - SEE_OTHER",
                "304": "304 - NOT_MODIFIED",
                "305": "305 - USE_PROXY",
                "307": "307 - TEMPORARY_REDIRECT",
                "400": "400 - BAD_REQUEST",
                "401": "401 - UNAUTHORIZED",
                "402": "402 - PAYMENT_REQUIRED",
                "403": "403 - FORBIDDEN",
                "404": "404 - NOT_FOUND",
                "405": "405 - METHOD_NOT_ALLOWED",
                "406": "406 - NOT_ACCEPTABLE",
                "407": "407 - PROXY_AUTHENTICATION_REQUIRED",
                "408": "408 - REQUEST_TIMEOUT",
                "409": "409 - CONFLICT",
                "410": "410 - GONE",
                "411": "411 - LENGTH_REQUIRED",
                "412": "412 - PRECONDITION_FAILED",
                "413": "413 - REQUEST_ENTITY_TOO_LARGE",
                "414": "414 - REQUEST_URI_TOO_LONG",
                "415": "415 - UNSUPPORTED_MEDIA_TYPE",
                "416": "416 - REQUESTED_RANGE_NOT_SATISFIABLE",
                "417": "417 - EXPECTATION_FAILED",
                "422": "422 - UNPROCESSABLE_ENTITY",
                "423": "423 - LOCKED",
                "424": "424 - FAILED_DEPENDENCY",
                "429": "429 - TOO_MANY_REQUESTS",
                "500": "500 - INTERNAL_SERVER_ERROR",
                "501": "501 - NOT_IMPLEMENTED",
                "502": "502 - BAD_GATEWAY",
                "503": "503 - SERVICE_UNAVAILABLE",
                "504": "504 - GATEWAY_TIMEOUT",
                "505": "505 - HTTP_VERSION_NOT_SUPPORTED",
                "507": "507 - INSUFFICIENT_STORAGE"
              }
            }
          },
          "rules": {
            "type": "array",
            "title": "Rules",
            "items": {
              "type": "object",
              "title": "Rule",
              "id": "urn:jsonschema:io:gravitee:policy:requestvalidation:Rule",
              "properties": {
                "input": {
                  "type": "string",
                  "title": "Field value",
                  "description": "The input value to validate (supports EL)"
                },
                "isRequired": {
                  "type": "boolean",
                  "title": "Required",
                  "description": "If true, check the pattern always. If false check the pattern, only if this one is present in the request",
                  "default": true
                },
                "constraint": {
                  "type": "object",
                  "title": "Constraint",
                  "id": "urn:jsonschema:io:gravitee:policy:requestvalidation:Constraint",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["NOT_NULL", "MIN", "MAX", "MAIL", "PATTERN", "SIZE"],
                      "default": "NOT_NULL",
                      "title": "Type",
                      "description": "The constraint rule to apply to the field value.<ul><li>NOT_NULL: Field value is required</li><li>MIN: Field number value is greater or equals than parameter</li><li>MAX: Field number value is lower or equals than parameter</li><li>MAIL: Field value is a valid email</li><li>PATTERN: Field value is valid according to the pattern parameter</li><li>SIZE: Field value length is between min and max parameters</li><ul/>"
                    },
                    "parameters": {
                      "type": "array",
                      "title": "Parameters",
                      "items": {
                        "type": "string",
                        "title": "Parameter",
                        "description": "Must be defined for MIN, MAX or PATTERN constraints (supports EL)"
                      }
                    },
                    "message": {
                      "type": "string",
                      "title": "Message template",
                      "description": "Set a message template to override the default one. (Example: <i>'%s' must be higher or equals to '%s'</i>)"
                    }
                  },
                  "required": ["type"]
                }
              },
              "required": ["input", "constraint"]
            }
          }
        },
        "required": ["status", "rules"]
      }
    },
    {
      "id": "xml-json",
      "name": "XML to JSON",
      "description": "Description of the XML to JSON Transformation  Gravitee Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    },
    {
      "id": "xslt",
      "name": "XSLT Transformation",
      "description": "Description of the XSLT Gravitee Policy",
      "version": "1.4.0",
      "icon": "",
      "category": "transformation",
      "onRequest": true,
      "onResponse": true
    }
  ]
}
